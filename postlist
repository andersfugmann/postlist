#!/bin/bash

# TODO: Run with suid and have a list user.
# Examine how mailman3 filtering happend - we are also a filter

set -e
export PATH=${PATH}:/usr/bin:/usr/sbin

### Init file reader
trim()
{
    local trimmed="$@"
    trimmed="${trimmed## }"
    trimmed="${trimmed%% }"
    echo "$trimmed"
}

function parse_ini_file() { #accepts the name of the file to parse as argument ($1)
    #declare syntax below (-gA) only works with bash 4.2 and higher
    unset CONFIG
    declare -gA CONFIG
    currentSection=""
    while read -r line; do
        if [[ $line = \[*  ]]; then
            currentSection=$(echo $line | tr -d "[]")
        elif [[ $line = *=*  ]]; then
            key=$(trim $currentSection.$(echo $line | cut -d'=' -f1))
            value="$(trim $(echo $line | cut -d'=' -f2))"
            CONFIG[$key]="$value"
        fi
    done < <(sed 's/#.*//' $1)
}

CONFIG_FILE=${CONFIG_FILE-/etc/postlist.conf}
if [ -f /etc/default/postlist ]; then
    source /etc/default/postlist
fi
parse_ini_file ${CONFIG_FILE}

ADMIN="${CONFIG[general.owner]}"
LIB_DIR="${CONFIG[general.archive_dir]}"
ALIAS_FILE="${CONFIG[general.alias_file]}"
DOMAIN="${CONFIG[general.domain]}"
MTA="${CONFIG[general.mta]}"

SENDMAIL="/usr/sbin/sendmail -G -i" # NEVER NEVER NEVER use "-t" here.

# Exit codes from <sysexits.h>
EX_TEMPFAIL=75
EX_UNAVAILABLE=69

function decode() { : "${*//+/ }"; echo -e "${_//=/\\x}"; }

## Handle list delivery
function handle_mail () {
    LIST=$1
    ADDRESS=${LIST}@${DOMAIN}
    if [ -z "${ADDRESS}" ]; then
	echo "List does not exist: $LIST"
	exit ${EX_UNAVAILABLE}
    fi
    SUBSCRIBERS="${CONFIG[${LIST}.subscribers]}"
    DESCRIPTION="${CONFIG[${LIST}.description]}"
    BOUNCE=${LIST}-bounce@${DOMAIN}

    # Figure out if we are CC'ed or Addressed directly
    # Its a bit hard, as we might have multiple TO adresses and multiple CC addresses

    ARCHIVE_DIR=${LIB_DIR}/${LIST}
    MAIL=${ARCHIVE_DIR}/new/$(date -Ins)
    cat >${MAIL} || (echo Cannot save mail to file; exit $EX_TEMPFAIL)

    if formail -c -z -x 'X-Loop:' | grep -q ${LIST}; then
        SUBJECT=$(formail -c -z -x "Subject:" < ${MAIL})
        cat ${MAIL} \
            | formail -t -f \
	              -I "List-Id: ${DESCRIPTION} <$ADDRESS>" \
	              -i "Subject:[$LIST Bounce] ${SUBJECT}" \
            | ${SENDMAIL} ${ADMIN}
	mv $MAIL ${ARCHIVE_DIR}/bounce
    else
        # Extrace subject and remove Re: Re: Re: patterns
        SUBJECT=$(formail -c -z -x "Subject:" < ${MAIL} | sed -E 's/(Re:[ ]+)+/Re: /')

        # Prepend list name if not already there.
        if ! decode $SUBJECT | grep -q "\[${LIST}\]"; then
            SUBJECT="[${LIST}] ${SUBJECT}"
        fi

        FROM=$(formail -c -z -x 'From:' < ${MAIL})
        SENDER=$(echo ${FROM} | sed 's/[ ]*<.*>[ ]*//')
        if [ -z "$SENDER" ]; then
            SENDER=$(echo ${FROM} | sed -E 's/.*<(.*)@.*>.*/\1/')
        fi

        ## Rewrite to / cc fields, so we have a canonical list address
        ## As the from address has been replaced.
        REPLACE="s/(^|,)[^,]*<${ADDRESS}>[^,]*(,|\$)/\1${DESCRIPTION} <$ADDRESS>\2/g"
        TO=$(formail -c -z -x 'To:' < ${MAIL} | sed -E "${REPLACE}")
        CC=$(formail -c -z -x 'Cc:' < ${MAIL} | sed -E "${REPLACE}")
        # Drop stupid 'Re: Re: Re:' in subject lines
        cat ${MAIL} \
            | formail -t -f \
	              -I "Return-Path:" \
	              -i "From: ${SENDER} via ${LIST} <${ADDRESS}>" \
                      -I "To: ${TO}" \
                      -I "Cc: ${CC}" \
                      -i "Subject: ${SUBJECT}" \
                      -I "Message-ID:" -a "Message-ID:" \
	              -I "X-Loop: ${LIST}" \
	              -I "DKIM-Signature:" \
	              -I "List-Id: ${DESCRIPTION} <${ADDRESS/@/.}>" \
	              -I "List-Post: ${DESCRIPTION} <$ADDRESS>" \
	              -I "List-Unsubscribe: <$ADMIN>" \
	              -I "List-Owner: <$ADMIN>" \
            | ${SENDMAIL} -f ${BOUNCE} ${SUBSCRIBERS}
	mv $MAIL ${ARCHIVE_DIR}/archive
    fi
}

## Setup postfix
function setup_postfix () {
    ALIAS_MAPS="$(postconf -p alias_maps)"
    if grep -q "hash:${ALIAS_FILE}" <(echo $ALIAS_MAPS); then
        echo "Alias maps already updated."
    else
        echo "Updating postfix configuration,"
        postconf -e "${ALIAS_MAPS}, hash:${ALIAS_FILE}"
    fi
    echo "Reloading postfix configuration"
    postalias ${ALIAS_FILE}
    postfix reload
}

## Setup all lists.
function setup () {
    echo -n "Setup ${ALIAS_FILE} for lists:"
    SCRIPT=$(readlink -f $0)
    # Create all directories, and create the alias file
    LISTS="$(cat $CONFIG_FILE | grep "^\[.*\]" | sed 's/[\[\]]//g' | tr -d "[]" | grep -v 'general')"
    echo "# Autogenerated file. Do not edit" > ${ALIAS_FILE}
    echo "# Generated $(date) by ${SCRIPT}" >> ${ALIAS_FILE}

    for LIST in ${LISTS}; do
        echo -n "$LIST "
	ADDRESS=${LIST}@${DOMAIN}
	SUBSCRIBERS="${CONFIG[${LIST}.subscribers]}"
	DESCRIPTION="${CONFIG[${LIST}.description]}"
        echo >> ${ALIAS_FILE}
        echo "# ${LIST}: ${DESCRIPTION} <${ADDRESS}>" >> ${ALIAS_FILE}
        echo "${LIST}: |${SCRIPT}" >> ${ALIAS_FILE}
        echo "${LIST}-bounce: ${ADMIN}" >> ${ALIAS_FILE}

	for dir in new archive bounce; do
            mkdir -p ${LIB_DIR}/${LIST}/${dir}
	    chmod a+rw ${LIB_DIR}/${LIST}/${dir}
	done
    done
    echo

    case $MTA in
        postfix)
            setup_postfix
            ;;
        *)
            echo "Unsupported MTA: ${MTA}."
            echo "Skipping MTA specific commands"
	    ;;
    esac
}

# Main entry point
case $1 in
    "")
	if [ -n "${LOCAL}" ]; then
	    handle_mail ${LOCAL}
	else
            "Use: $0 setup"
	fi
        ;;
    "setup")
        setup
        ;;
    *)
        echo "Unknown option $1"
        exit 1
        ;;
esac
